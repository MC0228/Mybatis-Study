# Mybaits

SSM框架：配置文件，学习看官网文档

Mybatis官网：https://mybatis.net.cn/index.html

## 1.简介

![img.png](img.png)

### 1.1什么是Mybatis

- Mybatis是一款优秀的**持久层框架**
- 它支持自定义SQL、存储过程以及高级映射
- Mybatis免除了几乎所有的JDBC代码以及设置参数和获取结果集的工作
- Mybatis可以通过简单的XML或者注解来配置和映射原始类型、接口和Java POJO为数据库中的记录
- Mybatis本事apache的一个开源项目iBatis，2010年项目有apache software foundation 迁移到google code，并且改名为Mybatis。
- 2013年11月迁移至Github

**Maven仓库** ：https://mvnrepository.com/artifact/org.mybatis/mybatis

```xml
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.5.2</version>
</dependency>

```

### 1.2持久层

数据持久化

- 持久化：将长须的书在持久状态下和瞬时状态下转化的过程
- 内存：**断电即失**
- 数据库（jdbc），io文件持久化
- 生活中：冰箱的冷藏、密封罐头……

**为什么需要持久化**

- 有些对象，不能让它丢失。
- 内存的价格昂贵

### 1.3 持久层

Dao层、Service层、Controller层

- 完成持久化工作的代码块
- 层界限十分明显

### 1.4 为什么需要Mybatis？

- 帮助程序员将数据存入到数据库中
- 方便好用
- 传统的JDBC代码太复杂。简化，框架，自动化
- 不用Mybatis也可以实现。更容易上手
- 优点：
    - 简单易学
    - 灵活
    - sql和代码得分离，提高了可维护性。
    - 提供支持对象与数据库ORM字段关系映射
    - 提供对象关系映射标签，支持对象关系组建维护
    - 提供xml标签，支持编写动态sql

**好用，用的人多**

## 2.Mybatis入门程序

思路: 搭建环境-- 导入Mybatis-- 编写代码-- 测试！

### 2.1搭建环境

**数据库**

```
CREATE DATABASE `mybatis`;
        USE `mybatis`;

        CREATE TABLE `user`(
        `id` INT(20)NOT NULL PRIMARY KEY,
        `name` VARCHAR(30)DEFAULT NULL,
        `pwd` VARCHAR(30)DEFAULT NULL
        )ENGINE=INNODB DEFAULT CHARSET=utf8;

        INSERT INTO `user`(`id`,`name`,`pwd`)VALUES
        (1,'狂神','123456'),
        (2,'张三','123456'),
        (3,'李四','123890')

```

**导入Mybatis依赖**

```xml

<dependencies>
    <!--Mybatis-->
    <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis</artifactId>
        <version>3.5.13</version>
    </dependency>
    <!--Mysql-->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>5.1.47</version>
    </dependency>
    <!--Junit-->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <scope>test</scope>
    </dependency>
    <!--lombok-->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.30</version>
    </dependency>
</dependencies>
```

**编写代码**

- mybatis-config.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url"
                          value="jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="com/shisan/mapper/UserMapper.xml"/>
    </mappers>
</configuration>
```

- MybatisUtils工具类

```java
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;

/**
 * @Author:shisan
 * @Date:2023/10/30 7:53
 */
// sqlSessionFactory --> sqlSession
public class MybatisUtils {
    private static SqlSessionFactory sqlSessionFactory;

    static {
        try {
            // 使用Mybatis：获取sqlSessionFactory对象
            String resource = "mybatis-config.xml";
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static SqlSession getSqlSession() {
        return sqlSessionFactory.openSession();
    }
}

```

- 实体类User

```java
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @Author:shisan
 * @Date:2023/10/30 8:00
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    private Integer id;
    private String name;
    private String password;
}
```

- UserMapper

```java
import java.util.List;

/**
 * @Author:shisan
 * @Date:2023/10/30 8:01
 */
public interface UserMapper {
    List<User> findAll();
}
```

- UserMapper.xml

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace=绑定一个对应的Dao/Mapper接口-->
<mapper namespace="com.shisan.mapper.UserMapper">
    <!--select查询语句-->
    <select id="findAll" resultType="com.shisan.pojo.User">
        select *
        from `user`
    </select>

</mapper>

```

- 测试类

```java
import com.shisan.pojo.User;
import com.shisan.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.List;

/**
 * @Author:shisan
 * @Date:2023/10/30 10:22
 */
public class UserMapperTest {
    @Test
    // 方式一：
    public void findAll() {
        //获取SqlSession对象
        SqlSession sqlSession = MybatisUtils.getSqlSession();

        // getMapper
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);


        // 查询全部
        List<User> userList = mapper.findAll();
        for (User user : userList) {
            System.out.println(user);
        }

        // 关闭SQLSession
        sqlSession.close();
    }
}
```

## 3.CRUD

**namespace**

namespaced中的报名和Mapper接口的包名一致
![img_1.png](img_1.png)

- 标签说明
    - id：对应的namespace中的方法
    - resultType:SQL语句执行的返回值
    - parameterType：参数类型


- 接口文档：

```java
import com.shisan.pojo.User;

import java.util.List;

/**
 * @Author:shisan
 * @Date:2023/10/30 8:01
 */
public interface UserMapper {
    List<User> findAll();

    User findById(Integer id);

    Integer add(User user);

    Integer update(User user);

    Integer deleteById(Integer id);

}
```

- sql语句

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace=绑定一个对应的Dao/Mapper接口-->
<mapper namespace="com.shisan.mapper.UserMapper">

    <!--新增用户-->
    <insert id="add">
        insert into USER (id, name, password)
        values (#{id}, #{name}, #{password});
    </insert>

    <!--更新用户信息-->
    <update id="update">
        update user
        set name = #{name},
        password = #{password}
        where id = #{id};
    </update>

    <!--根据id删除-->
    <delete id="deleteById">
        delete
        from user
        where id = #{id};
    </delete>

    <!--select查询语句-->
    <select id="findAll" resultType="com.shisan.pojo.User">
        select *
        from `user`
    </select>
    <!--根据id查询-->
    <select id="findById" resultType="com.shisan.pojo.User">
        select *
        from user
        where id = #{id};
    </select>

</mapper>

```

- 测试

```java
import com.shisan.pojo.User;
import com.shisan.utils.MybatisUtils;
import org.apache.ibatis.session.SqlSession;
import org.junit.Test;

import java.util.List;

/**
 * @Author:shisan
 * @Date:2023/10/30 10:22
 */
public class UserMapperTest {
    @Test
    // 方式一：
    public void findAll() {
        //获取SqlSession对象
        SqlSession sqlSession = MybatisUtils.getSqlSession();

        // getMapper
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);


        // 查询全部
        List<User> userList = mapper.findAll();
        for (User user : userList) {
            System.out.println(user);
        }

        // 关闭SQLSession
        sqlSession.close();
    }

    @Test
    public void add() {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        // 新增用户
        User user = new User(null, "王五", "wang123");

        Integer add = mapper.add(user);
        if (add > 0) {
            System.out.println("添加成功！");
        }
        sqlSession.commit();

        sqlSession.close();
    }

    @Test
    public void deleteById() {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        // 根据id删除用户
        Integer deleteById = mapper.deleteById(6);
        if (deleteById > 0) {
            System.out.println("操作成功！");
        }
        sqlSession.close();
    }

    @Test
    public void update() {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        // 修改用户
        User user = new User(3, "xl", "240330");
        Integer update = mapper.update(user);
        if (update > 0) {
            System.out.println("操作成功！");
        }
        sqlSession.commit();
        sqlSession.close();
    }

    @Test
    public void selectById() {
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);

        // 根据id查询 id = 1
        User user = mapper.findById(1);
        System.out.println(user);

        sqlSession.close();
    }
}
```

**注意点**：

- 增删改需要提交事务

**模糊查询**

- UserMapper.xml

```xml

<select id="findLike" resultType="com.shisan.pojo.User">
    select *
    from user
    where name like concat("%", #{name}, "%");
</select>
```

- 注意：使用concat拼接的方法防止sql注入

- test

```
@Test
public void findLike(){
        SqlSession sqlSession=MybatisUtils.getSqlSession();
        UserMapper mapper=sqlSession.getMapper(UserMapper.class);

        // 根据name 模糊匹配
        List<User> users=mapper.findLike("shisan");
        for(User user:users){
        System.out.println(user);

        }

        sqlSession.close();
 }
```

## 4.配置解析

**1.核心配置文件**

- mybatis-config.xml
- Mybatis的配置文件包含了会深深影响Mybatis行为的设置和属性信息

```
configuration（配置）
properties（属性）
settings（设置）
typeAliases（类型别名）
typeHandlers（类型处理器）
objectFactory（对象工厂）
plugins（插件）
environments（环境配置）
environment（环境变量）
transactionManager（事务管理器）
dataSource（数据源）
databaseIdProvider（数据库厂商标识）
mappers（映射器）
```

**2.环境配置（environments）**

Mybatis 可以配置成适应多种环境

- 注意：尽管课配置多个环境，但每个SqlSessionFactory实例只能选择一种环境

学会使用配置多套运行环境

Mybatis默认的事务管理器是JDBC 连接池是POOLED

**3.属性（properties）**

我们可以通过properties属性来实现引用配置文件

这些属性可以在外部进行配置，并且可以动态替换。既可以在典型的java属性文件中配置属性，也可以在properties元素的子元素中设置

- db.properties

```properties
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/mybatis?useSSL=false&useUnicode=true&characterEncoding=utf-8
username=root
password=root
```

在核心配置文件中引入

```xml
<!--引入外部配置文件-->
<properties resource="db.properties">
    <property name="username" value="root"/>
    <property name="password" value="root"/>
</properties>
```

- 可以直接引入外部文件
- 可以在其中增加一些属性配置
- 如果两个文件有相同字段，会使用外部配置文件（外部配置文件优先级高）

**4.类型别名(typeAliases)**

- 类型别名可为Java类型设置一个缩写名字
- 仅用于xml配置，意在降低冗余的权限定类名书写

```xml
<!--可以给实体类起别名-->
<tAypeAliases>
    <typeAlias type="com.shisan.pojo.User" alias="User"></typeAlias>
</typeAliases>

```

也可以指定一个包名，Mybatis会在包名下搜索需要的Java Bean。扫面实体类的包，默认别名是这个类的类名首字母小写

```xml
<!--可以给实体类起别名-->
<tAypeAliases>
    <package name="com.shisan.pojo"></typeAlias>
</typeAliases>

```

在实体类中比较少的使用，使用第一种（自定义别名）

如果实体类十分多，建议使用第二种（注解）

```properties
@Alias("user")
public class User{}
```

**5.设置（setting）**

这是Mybatis种极为重要的调整设置，会改变Mybatis的运行时行为

![img_2.png](img_2.png)

**6.其他配置**

- typeHandlers（类型处理器）
- objectFactory（对象工厂）
- plugins（插件）

    - mybaits-generator-core
    - mybatis-plus
    - 通用mapper

**7.mappers（映射器）**

MapperRegistry：注册绑定我们的mapper文件

- 方式一：使用类路径的资源引用

```xml
<!-- 使用相对于类路径的资源引用 -->
<mappers>
    <mapper resource="com/shisan/mapper/UserMapper.xml"/>
</mappers>

```

- 方式二：使用class文件绑定注册

```xml

<mappers>
    <mapper class="com.shisan.mapper.UserMapper"/>
</mappers>

```

注意点：

- 接口和它对应的mapper配置文件必须同名同包

- 方式三：使用扫面包经常注入绑定

```xml

<mappers>
    <mapper package="com.shisan.mapper"/>
</mappers>

```

注意点：

- 接口和它对应的mapper配置文件必须同名同包

**8、生命周期和作用域**

生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的并发问题。

- SqlSessionFactoryBuilder：

    - 一旦创建了SqlSessionFactory，就不再需要它了
    - 局部变量

- SqlSessionFactory：

    - 说白了就是可以想象成：数据库连接池
    - SqlSessionFactory一旦创建就应该在应用的运行期间一直存在，**没有任何理由丢弃它或重新创建另一个实例。**
    - 因此SqlSessionFactory的最佳作用域是应用作用域。
    - 最简单的就是使用单例模式或者静态单例模式 SqlSession：

- SqlSession

    - 连接到连接池的一个请求！
    - SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳作用域是请求或方法作用域
    - 用完之后需要赶紧关闭，否则资源被占用！

![img_3.png](img_3.png)

每一个Mapper，就代表一个具体的业务！

## 5.解决属性名和字段名不一致问题

**1.问题**

字段名
![img_4.png](img_4.png)

属性名
![img_5.png](img_5.png)

**2.解决办法resultMap**

结果集映射

    id   name     password
    
    id  username  password

```xml
<!--namespace=绑定一个对应的Dao/Mapper接口-->
<mapper namespace="com.shisan.mapper.UserMapper">
    <resultMap id="userMap" type="user">
        <result column="id" property="id"/>
        <result column="name" property="username"/>
        <result column="password" property="password"/>
    </resultMap>
    <!--根据id查询-->
    <select id="findById" resultMap="userMap">
        select *
        from user
        where id = #{id};
    </select>

</mapper>

```

- resultMap元素是Mybatis中最重要最强大的元素
  
- ResultMap的设计思想，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。
